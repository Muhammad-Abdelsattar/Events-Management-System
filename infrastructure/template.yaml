AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Event Registration System Backend (Python)

Parameters:
  ProjectName:
    Type: String
    Default: EventRegSys
    Description: A base name for all resources
  CognitoUserPoolArn:
    Type: String
    Description: ARN of the existing Cognito User Pool
  CognitoUserPoolId:
    Type: String
    Description: ID of the existing Cognito User Pool
  SESVerifiedEmailSender:
    Type: String
    Description: A verified email address in SES to send emails from (e.g., no-reply@yourdomain.com)

Globals:
  Function:
    Timeout: 15
    MemorySize: 128
    Runtime: python3.9
    Tracing: Active

Resources:
  # --- API Gateway ---
  EventRegistrationApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Protocol: HTTP
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers: 
          CognitoAuthorizer:
            UserPoolArn: !Ref CognitoUserPoolArn
      # CORS for HTTP APIs is generally simpler, often just `AllowOrigins`
      CorsConfiguration: # <--- CHANGED PROPERTY NAME for HTTP API CORS
        AllowOrigins: "'*'" # Or specific frontend domain, e.g., "'https://events.yourdomain.com'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'*'"
        MaxAge: 600 # No quotes needed for numbers``
  # --- DynamoDB Tables (No change from Node.js version) ---
  EventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ProjectName}-Events
      AttributeDefinitions:
        - AttributeName: eventId
          AttributeType: S
        - AttributeName: organizerId
          AttributeType: S
        - AttributeName: eventDate
          AttributeType: S
      KeySchema:
        - AttributeName: eventId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: OrganizerIdIndex
          KeySchema:
            - AttributeName: organizerId
              KeyType: HASH
            - AttributeName: eventDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

  RegistrationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ProjectName}-Registrations
      AttributeDefinitions:
        - AttributeName: registrationId
          AttributeType: S
        - AttributeName: eventId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: registrationId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: EventIdIndex
          KeySchema:
            - AttributeName: eventId
              KeyType: HASH
            - AttributeName: registrationId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: registrationId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

  # --- SQS Queue for Email Notifications (No change) ---
  EmailNotificationsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${ProjectName}-EmailNotificationsQueue
      VisibilityTimeout: 300

  # --- Lambda Functions ---

  EventManagerLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: events-manager-lambda/
      Handler: app.lambda_handler # <--- CHANGED TO PYTHON HANDLER NAME
      Environment:
        Variables:
          EVENTS_TABLE_NAME: !Ref EventsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventsTable
        - Statement: # Policy to get user info from Cognito Authorizer context (AuthN/AuthZ)
            Effect: Allow
            Action:
              - cognito-idp:DescribeUserPool
              - cognito-idp:GetUser
            Resource: !Ref CognitoUserPoolArn
      Events:
        CreateEvent:
          Type: Api
          RestApiId: !Ref EventRegistrationApi 
          Properties:
            Path: /events
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        GetEvents:
          Type: Api
          RestApiId: !Ref EventRegistrationApi 
          Properties:
            Path: /events
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetEventDetails:
          Type: Api
          RestApiId: !Ref EventRegistrationApi 
          Properties:
            Path: /events/{eventId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        UpdateEvent:
          Type: Api
          RestApiId: !Ref EventRegistrationApi 
          Properties:
            Path: /events/{eventId}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteEvent:
          Type: Api
          RestApiId: !Ref EventRegistrationApi 
          Properties:
            Path: /events/{eventId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  RegistrationManagerLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: registration-manager-lambda/
      Handler: app.lambda_handler # <--- CHANGED
      Environment:
        Variables:
          EVENTS_TABLE_NAME: !Ref EventsTable
          REGISTRATIONS_TABLE_NAME: !Ref RegistrationsTable
          EMAIL_QUEUE_URL: !Ref EmailNotificationsQueue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RegistrationsTable
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:UpdateItem
            Resource: !GetAtt EventsTable.Arn
        - SQSSendMessagePolicy:
            QueueName: !GetAtt EmailNotificationsQueue.QueueName
        - Statement: # Policy to get user info from Cognito Authorizer context
            Effect: Allow
            Action:
              - cognito-idp:DescribeUserPool
              - cognito-idp:GetUser
            Resource: !Ref CognitoUserPoolArn
      Events:
        RegisterForEvent:
          Type: Api
          RestApiId: !Ref EventRegistrationApi 
          Properties:
            Path: /events/{eventId}/register
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  AttendeeViewerLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: attendee-viewer-lambda/
      Handler: app.lambda_handler # <--- CHANGED
      Environment:
        Variables:
          EVENTS_TABLE_NAME: !Ref EventsTable
          REGISTRATIONS_TABLE_NAME: !Ref RegistrationsTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref RegistrationsTable
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource: !GetAtt EventsTable.Arn
        - Statement: # Policy to get user info from Cognito Authorizer context
            Effect: Allow
            Action:
              - cognito-idp:DescribeUserPool
              - cognito-idp:GetUser
            Resource: !Ref CognitoUserPoolArn
      Events:
        GetAttendees:
          Type: Api
          RestApiId: !Ref EventRegistrationApi 
          Properties:
            Path: /events/{eventId}/attendees
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  EmailSenderLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: email-sender-lambda/
      Handler: app.lambda_handler # <--- CHANGED
      Environment:
        Variables:
          SES_SENDER_EMAIL: !Ref SESVerifiedEmailSender
      Policies:
        - SESCrudPolicy:
            IdentityName: !Ref SESVerifiedEmailSender
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt EmailNotificationsQueue.Arn
            BatchSize: 10

Outputs:
  EventRegistrationApiUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${EventRegistrationApi.Fn::GetAtt: Outputs.ApiId}.execute-api.${AWS::Region}.amazonaws.com/prod/"
